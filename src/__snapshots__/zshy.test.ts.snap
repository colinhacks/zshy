// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`zshy with different tsconfig configurations > should work with basic.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "💎 Starting zshy build...
🗣️ Verbose mode enabled
⚙️  Detected project root: <project-root>
📦 Reading package.json from ./package.json
🔧 Parsed zshy config: {
  "exports": {
    ".": "./src/index.ts",
    "./utils": "./src/utils.ts",
    "./plugins/*": "./src/plugins/*"
  },
  "sourceDialects": [
    "@zod/source"
  ],
  "tsconfig": "./tsconfig.build.json"
}
📁 Reading tsconfig from ./basic.test.tsconfig.json
🗑️  Cleaning up outDir...
   ✅ Successfully cleaned up outDir: dist
🗑️  Skipping cleanup of declarationDir as it contains source files
➡️  Determining entrypoints...
   ╔══════════════════╤═════════════════════════════╗
   ║ Subpath          │ Entrypoint                  ║
   ╟──────────────────┼─────────────────────────────╢
   ║ "zshy"           │ ./src/index.ts              ║
   ║ "zshy/utils"     │ ./src/utils.ts              ║
   ║ "zshy/plugins/*" │ ./src/plugins/* (<count> matches) ║
   ╚══════════════════╧═════════════════════════════╝
🔧 Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
🟨 Package is an ES module (package.json#type is "module")
🧱 Building CJS... (rewriting .ts -> .cjs/.d.cts)
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: CommonJS
   Target: ES2020
   Writing: <project-root>/dist/utils.cjs
   Writing: <project-root>/dist/utils.d.cts
   Writing: <project-root>/dist/index.cjs
   Writing: <project-root>/dist/index.d.cts
   Writing: <project-root>/dist/plugins/a.cjs
   Writing: <project-root>/dist/plugins/a.d.cts
   Writing: <project-root>/dist/plugins/b.cjs
   Writing: <project-root>/dist/plugins/b.d.cts
🧱 Building ESM...
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: ESNext
   Target: ES2020
   Writing: <project-root>/dist/utils.js
   Writing: <project-root>/dist/utils.d.ts
   Writing: <project-root>/dist/index.js
   Writing: <project-root>/dist/index.d.ts
   Writing: <project-root>/dist/plugins/a.js
   Writing: <project-root>/dist/plugins/a.d.ts
   Writing: <project-root>/dist/plugins/b.js
   Writing: <project-root>/dist/plugins/b.d.ts
📦 Updating package.json exports...
   {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./dist/index.d.cts",
       "import": "./dist/index.js",
       "require": "./dist/index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./dist/utils.d.cts",
       "import": "./dist/utils.js",
       "require": "./dist/utils.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./dist/plugins/*",
       "import": "./dist/plugins/*",
       "require": "./dist/plugins/*"
     }
   }
📁 Contents of outDir (dist):
├── plugins
│   ├── a.cjs
│   ├── a.d.cts
│   ├── a.d.ts
│   ├── a.js
│   ├── b.cjs
│   ├── b.d.cts
│   ├── b.d.ts
│   └── b.js
├── index.cjs
├── index.d.cts
├── index.d.ts
├── index.js
├── utils.cjs
├── utils.d.cts
├── utils.d.ts
└── utils.js
🎉 Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with bin.test.tsconfig.json 1`] = `
{
  "exitCode": 1,
  "stderr": "node:internal/modules/run_main:105
    triggerUncaughtException(
    ^
Error [TransformError]: Transform failed with 1 error:
<project-root>/src/index.ts:1:3: ERROR: Syntax error "!"
    at failureErrorWithLog (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:1463:15)
    at <project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:734:50
    at responseCallbacks.<computed> (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:601:9)
    at handleIncomingPacket (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:656:12)
    at Socket.readFromStdout (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:579:7)
    at Socket.emit (node:events:507:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:189:23)

Node.js v24.3.0",
  "stdout": "",
}
`;

exports[`zshy with different tsconfig configurations > should work with bin-string.test.tsconfig.json 1`] = `
{
  "exitCode": 1,
  "stderr": "node:internal/modules/run_main:105
    triggerUncaughtException(
    ^
Error [TransformError]: Transform failed with 1 error:
<project-root>/src/index.ts:1:3: ERROR: Syntax error "!"
    at failureErrorWithLog (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:1463:15)
    at <project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:734:50
    at responseCallbacks.<computed> (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:601:9)
    at handleIncomingPacket (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:656:12)
    at Socket.readFromStdout (<project-root>/node_modules/.pnpm/esbuild@0.25.5/node_modules/esbuild/lib/main.js:579:7)
    at Socket.emit (node:events:507:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:189:23)

Node.js v24.3.0",
  "stdout": "",
}
`;

exports[`zshy with different tsconfig configurations > should work with legacy.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "💎 Starting zshy build...
🗣️ Verbose mode enabled
⚙️  Detected project root: <project-root>
📦 Reading package.json from ./package.json
🔧 Parsed zshy config: {
  "exports": {
    ".": "./src/index.ts",
    "./utils": "./src/utils.ts",
    "./plugins/*": "./src/plugins/*"
  },
  "sourceDialects": [
    "@zod/source"
  ],
  "tsconfig": "./tsconfig.build.json"
}
📁 Reading tsconfig from ./legacy.test.tsconfig.json
🗑️  Cleaning up outDir...
   ✅ Successfully cleaned up outDir: lib
🗑️  Skipping cleanup of declarationDir as it contains source files
➡️  Determining entrypoints...
   ╔══════════════════╤═════════════════════════════╗
   ║ Subpath          │ Entrypoint                  ║
   ╟──────────────────┼─────────────────────────────╢
   ║ "zshy"           │ ./src/index.ts              ║
   ║ "zshy/utils"     │ ./src/utils.ts              ║
   ║ "zshy/plugins/*" │ ./src/plugins/* (<count> matches) ║
   ╚══════════════════╧═════════════════════════════╝
🔧 Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./lib         ║
   ╚══════════╧═══════════════╝
🟨 Package is an ES module (package.json#type is "module")
🧱 Building CJS... (rewriting .ts -> .cjs/.d.cts)
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: CommonJS
   Target: ES2018
   Writing: <project-root>/lib/utils.js.map
   Writing: <project-root>/lib/utils.cjs
   Writing: <project-root>/lib/utils.d.cts
   Writing: <project-root>/lib/index.js.map
   Writing: <project-root>/lib/index.cjs
   Writing: <project-root>/lib/index.d.cts
   Writing: <project-root>/lib/plugins/a.js.map
   Writing: <project-root>/lib/plugins/a.cjs
   Writing: <project-root>/lib/plugins/a.d.cts
   Writing: <project-root>/lib/plugins/b.js.map
   Writing: <project-root>/lib/plugins/b.cjs
   Writing: <project-root>/lib/plugins/b.d.cts
🧱 Building ESM...
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: ESNext
   Target: ES2018
   Writing: <project-root>/lib/utils.js.map
   Writing: <project-root>/lib/utils.js
   Writing: <project-root>/lib/utils.d.ts
   Writing: <project-root>/lib/index.js.map
   Writing: <project-root>/lib/index.js
   Writing: <project-root>/lib/index.d.ts
   Writing: <project-root>/lib/plugins/a.js.map
   Writing: <project-root>/lib/plugins/a.js
   Writing: <project-root>/lib/plugins/a.d.ts
   Writing: <project-root>/lib/plugins/b.js.map
   Writing: <project-root>/lib/plugins/b.js
   Writing: <project-root>/lib/plugins/b.d.ts
📦 Updating package.json exports...
   {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./lib/index.d.cts",
       "import": "./lib/index.js",
       "require": "./lib/index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./lib/utils.d.cts",
       "import": "./lib/utils.js",
       "require": "./lib/utils.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./lib/plugins/*",
       "import": "./lib/plugins/*",
       "require": "./lib/plugins/*"
     }
   }
📁 Contents of outDir (lib):
├── plugins
│   ├── a.cjs
│   ├── a.d.cts
│   ├── a.d.ts
│   ├── a.js
│   ├── a.js.map
│   ├── b.cjs
│   ├── b.d.cts
│   ├── b.d.ts
│   ├── b.js
│   └── b.js.map
├── index.cjs
├── index.d.cts
├── index.d.ts
├── index.js
├── index.js.map
├── utils.cjs
├── utils.d.cts
├── utils.d.ts
├── utils.js
└── utils.js.map
🎉 Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with modern.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "💎 Starting zshy build...
🗣️ Verbose mode enabled
⚙️  Detected project root: <project-root>
📦 Reading package.json from ./package.json
🔧 Parsed zshy config: {
  "exports": {
    ".": "./src/index.ts",
    "./utils": "./src/utils.ts",
    "./plugins/*": "./src/plugins/*"
  },
  "sourceDialects": [
    "@zod/source"
  ],
  "tsconfig": "./tsconfig.build.json"
}
📁 Reading tsconfig from ./modern.test.tsconfig.json
🗑️  Cleaning up outDir...
   ✅ Successfully cleaned up outDir: output/js
🗑️  Cleaning up declarationDir...
   ✅ Successfully cleaned up declarationDir: output/types
➡️  Determining entrypoints...
   ╔══════════════════╤═════════════════════════════╗
   ║ Subpath          │ Entrypoint                  ║
   ╟──────────────────┼─────────────────────────────╢
   ║ "zshy"           │ ./src/index.ts              ║
   ║ "zshy/utils"     │ ./src/utils.ts              ║
   ║ "zshy/plugins/*" │ ./src/plugins/* (<count> matches) ║
   ╚══════════════════╧═════════════════════════════╝
🔧 Resolved build paths:
   ╔════════════════╤════════════════╗
   ║ Location       │ Resolved path  ║
   ╟────────────────┼────────────────╢
   ║ rootDir        │ .              ║
   ║ outDir         │ ./output/js    ║
   ║ declarationDir │ ./output/types ║
   ╚════════════════╧════════════════╝
🟨 Package is an ES module (package.json#type is "module")
🧱 Building CJS... (rewriting .ts -> .cjs/.d.cts)
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: CommonJS
   Target: ES2022
   Writing: <project-root>/output/js/src/utils.cjs
   Writing: <project-root>/output/types/src/utils.d.cts
   Writing: <project-root>/output/js/src/index.cjs
   Writing: <project-root>/output/types/src/index.d.cts
   Writing: <project-root>/output/js/src/plugins/a.cjs
   Writing: <project-root>/output/types/src/plugins/a.d.cts
   Writing: <project-root>/output/js/src/plugins/b.cjs
   Writing: <project-root>/output/types/src/plugins/b.d.cts
🧱 Building ESM...
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: ESNext
   Target: ES2022
   Writing: <project-root>/output/js/src/utils.js
   Writing: <project-root>/output/types/src/utils.d.ts
   Writing: <project-root>/output/js/src/index.js
   Writing: <project-root>/output/types/src/index.d.ts
   Writing: <project-root>/output/js/src/plugins/a.js
   Writing: <project-root>/output/types/src/plugins/a.d.ts
   Writing: <project-root>/output/js/src/plugins/b.js
   Writing: <project-root>/output/types/src/plugins/b.d.ts
📦 Updating package.json exports...
   {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./output/types/src/index.d.cts",
       "import": "./output/js/src/index.js",
       "require": "./output/js/src/index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./output/types/src/utils.d.cts",
       "import": "./output/js/src/utils.js",
       "require": "./output/js/src/utils.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./output/types/src/plugins/*",
       "import": "./output/js/src/plugins/*",
       "require": "./output/js/src/plugins/*"
     }
   }
📁 Contents of outDir (output/js):
└── src
    ├── plugins
    │   ├── a.cjs
    │   ├── a.js
    │   ├── b.cjs
    │   └── b.js
    ├── index.cjs
    ├── index.js
    ├── utils.cjs
    └── utils.js
📁 Contents of declarationDir (output/types):
└── src
    ├── plugins
    │   ├── a.d.cts
    │   ├── a.d.ts
    │   ├── b.d.cts
    │   └── b.d.ts
    ├── index.d.cts
    ├── index.d.ts
    ├── utils.d.cts
    └── utils.d.ts
🎉 Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with root-output.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "💎 Starting zshy build...
🗣️ Verbose mode enabled
⚙️  Detected project root: <project-root>
📦 Reading package.json from ./package.json
🔧 Parsed zshy config: {
  "exports": {
    ".": "./src/index.ts",
    "./utils": "./src/utils.ts",
    "./plugins/*": "./src/plugins/*"
  },
  "sourceDialects": [
    "@zod/source"
  ],
  "tsconfig": "./tsconfig.build.json"
}
📁 Reading tsconfig from ./root-output.test.tsconfig.json
🗑️  Skipping cleanup of outDir as it contains source files
🗑️  Skipping cleanup of declarationDir as it contains source files
➡️  Determining entrypoints...
   ╔══════════════════╤═════════════════════════════╗
   ║ Subpath          │ Entrypoint                  ║
   ╟──────────────────┼─────────────────────────────╢
   ║ "zshy"           │ ./src/index.ts              ║
   ║ "zshy/utils"     │ ./src/utils.ts              ║
   ║ "zshy/plugins/*" │ ./src/plugins/* (<count> matches) ║
   ╚══════════════════╧═════════════════════════════╝
🔧 Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ .             ║
   ╚══════════╧═══════════════╝
🟨 Package is an ES module (package.json#type is "module")
🧱 Building CJS... (rewriting .ts -> .cjs/.d.cts)
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: CommonJS
   Target: ES2020
   Writing: <project-root>/utils.cjs
   Writing: <project-root>/utils.d.ts.map
   Writing: <project-root>/utils.d.cts
   Writing: <project-root>/index.cjs
   Writing: <project-root>/index.d.ts.map
   Writing: <project-root>/index.d.cts
   Writing: <project-root>/plugins/a.cjs
   Writing: <project-root>/plugins/a.d.ts.map
   Writing: <project-root>/plugins/a.d.cts
   Writing: <project-root>/plugins/b.cjs
   Writing: <project-root>/plugins/b.d.ts.map
   Writing: <project-root>/plugins/b.d.cts
🧱 Building ESM...
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: ESNext
   Target: ES2020
   Writing: <project-root>/utils.js
   Writing: <project-root>/utils.d.ts.map
   Writing: <project-root>/utils.d.ts
   Writing: <project-root>/index.js
   Writing: <project-root>/index.d.ts.map
   Writing: <project-root>/index.d.ts
   Writing: <project-root>/plugins/a.js
   Writing: <project-root>/plugins/a.d.ts.map
   Writing: <project-root>/plugins/a.d.ts
   Writing: <project-root>/plugins/b.js
   Writing: <project-root>/plugins/b.d.ts.map
   Writing: <project-root>/plugins/b.d.ts
📦 Updating package.json exports...
   {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./index.d.cts",
       "import": "./index.js",
       "require": "./index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./utils.d.cts",
       "import": "./utils.js",
       "require": "./utils.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./plugins/*",
       "import": "./plugins/*",
       "require": "./plugins/*"
     }
   }
🎉 Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with separate-declarations.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "💎 Starting zshy build...
🗣️ Verbose mode enabled
⚙️  Detected project root: <project-root>
📦 Reading package.json from ./package.json
🔧 Parsed zshy config: {
  "exports": {
    ".": "./src/index.ts",
    "./utils": "./src/utils.ts",
    "./plugins/*": "./src/plugins/*"
  },
  "sourceDialects": [
    "@zod/source"
  ],
  "tsconfig": "./tsconfig.build.json"
}
📁 Reading tsconfig from ./separate-declarations.test.tsconfig.json
🗑️  Cleaning up outDir...
   ✅ Successfully cleaned up outDir: build
🗑️  Cleaning up declarationDir...
   ✅ Successfully cleaned up declarationDir: types
➡️  Determining entrypoints...
   ╔══════════════════╤═════════════════════════════╗
   ║ Subpath          │ Entrypoint                  ║
   ╟──────────────────┼─────────────────────────────╢
   ║ "zshy"           │ ./src/index.ts              ║
   ║ "zshy/utils"     │ ./src/utils.ts              ║
   ║ "zshy/plugins/*" │ ./src/plugins/* (<count> matches) ║
   ╚══════════════════╧═════════════════════════════╝
🔧 Resolved build paths:
   ╔════════════════╤═══════════════╗
   ║ Location       │ Resolved path ║
   ╟────────────────┼───────────────╢
   ║ rootDir        │ ./src         ║
   ║ outDir         │ ./build       ║
   ║ declarationDir │ ./types       ║
   ╚════════════════╧═══════════════╝
🟨 Package is an ES module (package.json#type is "module")
🧱 Building CJS... (rewriting .ts -> .cjs/.d.cts)
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: CommonJS
   Target: ES2020
   Writing: <project-root>/build/utils.cjs
   Writing: <project-root>/types/utils.d.cts
   Writing: <project-root>/build/index.cjs
   Writing: <project-root>/types/index.d.cts
   Writing: <project-root>/build/plugins/a.cjs
   Writing: <project-root>/types/plugins/a.d.cts
   Writing: <project-root>/build/plugins/b.cjs
   Writing: <project-root>/types/plugins/b.d.cts
🧱 Building ESM...
   Entry points: ./src/index.ts, ./src/utils.ts, ./src/plugins/a.ts, ./src/plugins/b.ts
   Module: ESNext
   Target: ES2020
   Writing: <project-root>/build/utils.js
   Writing: <project-root>/types/utils.d.ts
   Writing: <project-root>/build/index.js
   Writing: <project-root>/types/index.d.ts
   Writing: <project-root>/build/plugins/a.js
   Writing: <project-root>/types/plugins/a.d.ts
   Writing: <project-root>/build/plugins/b.js
   Writing: <project-root>/types/plugins/b.d.ts
📦 Updating package.json exports...
   {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./types/index.d.cts",
       "import": "./build/index.js",
       "require": "./build/index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./types/utils.d.cts",
       "import": "./build/utils.js",
       "require": "./build/utils.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./types/plugins/*",
       "import": "./build/plugins/*",
       "require": "./build/plugins/*"
     }
   }
📁 Contents of outDir (build):
├── plugins
│   ├── a.cjs
│   ├── a.js
│   ├── b.cjs
│   └── b.js
├── index.cjs
├── index.js
├── utils.cjs
└── utils.js
📁 Contents of declarationDir (types):
├── plugins
│   ├── a.d.cts
│   ├── a.d.ts
│   ├── b.d.cts
│   └── b.d.ts
├── index.d.cts
├── index.d.ts
├── utils.d.cts
└── utils.d.ts
🎉 Build complete!",
}
`;
