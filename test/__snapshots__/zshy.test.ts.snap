// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`zshy with different tsconfig configurations > should work with basic.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "→  Starting build...
→  Verbose mode enabled
→  Detected package manager: <pm>
→  Build will fail only on errors (default)
→  Detected project root: <root>/test
→  Reading package.json from ./package.json
→  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts",
       "./utils": "./src/utils.ts",
       "./plugins": "./src/plugins/index.ts",
       "./plugins/*": "./src/plugins/*"
     },
     "bin": "./src/index.ts",
     "sourceDialects": [
       "@zod/source"
     ]
   }
→  Reading tsconfig from ./tsconfig.basic.json
→  Determining entrypoints...
   ╔═══════════════════════════════╤═════════════════════════════╗
   ║ Subpath                       │ Entrypoint                  ║
   ╟───────────────────────────────┼─────────────────────────────╢
   ║ "zshy-test-fixture"           │ ./src/index.ts              ║
   ║ "zshy-test-fixture/utils"     │ ./src/utils.ts              ║
   ║ "zshy-test-fixture/plugins"   │ ./src/plugins/index.ts      ║
   ║ "zshy-test-fixture/plugins/*" │ ./src/plugins/* (4 matches) ║
   ║ bin:zshy-test-fixture         │ ./src/index.ts              ║
   ╚═══════════════════════════════╧═════════════════════════════╝
→  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
→  Package is an ES module (package.json#/type is "module")
→  Cleaning up outDir...
→  Cleaning up declarationDir...
→  Resolved entrypoints: [
     "./src/index.ts",
     "./src/utils.ts",
     "./src/plugins/index.ts",
     "./src/plugins/a.ts",
     "./src/plugins/b.cts",
     "./src/plugins/c.mts"
   ]
→  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/dist",
     "rootDir": "<root>/test/src",
     "emitDeclarationOnly": false
   }
→  Building CJS... (rewriting .ts -> .cjs/.d.cts)
→  Found 5 asset import(s), copying to output directory...
→  Copied asset: ./src/assets/README.md → ./dist/assets/README.md
→  Copied asset: ./src/assets/styles.css → ./dist/assets/styles.css
→  Copied asset: ./src/assets/config.json → ./dist/assets/config.json
→  Copied asset: ./src/plugins/plugin-a.css → ./dist/plugins/plugin-a.css
→  Copied asset: ./src/plugins/plugin-b.css → ./dist/plugins/plugin-b.css
→  Building ESM...
→  Found 5 asset import(s), copying to output directory...
→  Writing files (53 total)...
     ./dist/assets/README.md
     ./dist/assets/config.json
     ./dist/assets/styles.css
     ./dist/hello.cjs
     ./dist/hello.cjs.map
     ./dist/hello.d.cts
     ./dist/hello.d.cts.map
     ./dist/hello.d.ts
     ./dist/hello.d.ts.map
     ./dist/hello.js
     ./dist/hello.js.map
     ./dist/index.cjs
     ./dist/index.cjs.map
     ./dist/index.d.cts
     ./dist/index.d.cts.map
     ./dist/index.d.ts
     ./dist/index.d.ts.map
     ./dist/index.js
     ./dist/index.js.map
     ./dist/plugins/a.cjs
     ./dist/plugins/a.cjs.map
     ./dist/plugins/a.d.cts
     ./dist/plugins/a.d.cts.map
     ./dist/plugins/a.d.ts
     ./dist/plugins/a.d.ts.map
     ./dist/plugins/a.js
     ./dist/plugins/a.js.map
     ./dist/plugins/b.cjs
     ./dist/plugins/b.cjs.map
     ./dist/plugins/b.d.cts
     ./dist/plugins/b.d.cts.map
     ./dist/plugins/c.d.mts
     ./dist/plugins/c.d.mts.map
     ./dist/plugins/c.mjs
     ./dist/plugins/c.mjs.map
     ./dist/plugins/index.cjs
     ./dist/plugins/index.cjs.map
     ./dist/plugins/index.d.cts
     ./dist/plugins/index.d.cts.map
     ./dist/plugins/index.d.ts
     ./dist/plugins/index.d.ts.map
     ./dist/plugins/index.js
     ./dist/plugins/index.js.map
     ./dist/plugins/plugin-a.css
     ./dist/plugins/plugin-b.css
     ./dist/utils.cjs
     ./dist/utils.cjs.map
     ./dist/utils.d.cts
     ./dist/utils.d.cts.map
     ./dist/utils.d.ts
     ./dist/utils.d.ts.map
     ./dist/utils.js
     ./dist/utils.js.map
→  Updating package.json#/exports...
→  Generated "exports": {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./dist/index.d.cts",
       "import": "./dist/index.js",
       "require": "./dist/index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./dist/utils.d.cts",
       "import": "./dist/utils.js",
       "require": "./dist/utils.cjs"
     },
     "./plugins": {
       "@zod/source": "./src/plugins/index.ts",
       "types": "./dist/plugins/index.d.cts",
       "import": "./dist/plugins/index.js",
       "require": "./dist/plugins/index.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./dist/plugins/*",
       "import": "./dist/plugins/*",
       "require": "./dist/plugins/*"
     }
   }
→  Updating package.json#/bin...
→  Generated "bin": "./dist/index.cjs"
→  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with tsconfig.custom-paths.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "→  Starting build...
→  Verbose mode enabled
→  Detected package manager: <pm>
→  Dry run mode enabled. No files will be written or modified.
→  Build will fail only on errors (default)
→  Detected project root: <root>/test
→  Reading package.json from ./package.json
→  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts",
       "./utils": "./src/utils.ts",
       "./plugins": "./src/plugins/index.ts",
       "./plugins/*": "./src/plugins/*"
     },
     "bin": "./src/index.ts",
     "sourceDialects": [
       "@zod/source"
     ]
   }
→  Reading tsconfig from ./tsconfig.custom-paths.json
→  Determining entrypoints...
   ╔═══════════════════════════════╤═════════════════════════════╗
   ║ Subpath                       │ Entrypoint                  ║
   ╟───────────────────────────────┼─────────────────────────────╢
   ║ "zshy-test-fixture"           │ ./src/index.ts              ║
   ║ "zshy-test-fixture/utils"     │ ./src/utils.ts              ║
   ║ "zshy-test-fixture/plugins"   │ ./src/plugins/index.ts      ║
   ║ "zshy-test-fixture/plugins/*" │ ./src/plugins/* (4 matches) ║
   ║ bin:zshy-test-fixture         │ ./src/index.ts              ║
   ╚═══════════════════════════════╧═════════════════════════════╝
→  Resolved build paths:
   ╔════════════════╤═══════════════╗
   ║ Location       │ Resolved path ║
   ╟────────────────┼───────────────╢
   ║ rootDir        │ .             ║
   ║ outDir         │ ./build       ║
   ║ declarationDir │ ./types       ║
   ╚════════════════╧═══════════════╝
→  Package is an ES module (package.json#/type is "module")
→  [dryrun] Cleaning up outDir...
→  Resolved entrypoints: [
     "./src/index.ts",
     "./src/utils.ts",
     "./src/plugins/index.ts",
     "./src/plugins/a.ts",
     "./src/plugins/b.cts",
     "./src/plugins/c.mts"
   ]
→  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Node10",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/build",
     "rootDir": "<root>/test",
     "declarationDir": "<root>/test/types",
     "emitDeclarationOnly": false
   }
→  Building CJS... (rewriting .ts -> .cjs/.d.cts)
→  Found 5 asset import(s), copying to output directory...
→  [dryrun] Copied asset: ./src/assets/README.md → ./build/src/assets/README.md
→  [dryrun] Copied asset: ./src/assets/styles.css → ./build/src/assets/styles.css
→  [dryrun] Copied asset: ./src/assets/config.json → ./build/src/assets/config.json
→  [dryrun] Copied asset: ./src/plugins/plugin-a.css → ./build/src/plugins/plugin-a.css
→  [dryrun] Copied asset: ./src/plugins/plugin-b.css → ./build/src/plugins/plugin-b.css
→  Building ESM...
→  Found 5 asset import(s), copying to output directory...
→  [dryrun] Writing files (53 total)...
     ./build/src/assets/README.md
     ./build/src/assets/config.json
     ./build/src/assets/styles.css
     ./build/src/hello.cjs
     ./build/src/hello.cjs.map
     ./build/src/hello.js
     ./build/src/hello.js.map
     ./build/src/index.cjs
     ./build/src/index.cjs.map
     ./build/src/index.js
     ./build/src/index.js.map
     ./build/src/plugins/a.cjs
     ./build/src/plugins/a.cjs.map
     ./build/src/plugins/a.js
     ./build/src/plugins/a.js.map
     ./build/src/plugins/b.cjs
     ./build/src/plugins/b.cjs.map
     ./build/src/plugins/c.mjs
     ./build/src/plugins/c.mjs.map
     ./build/src/plugins/index.cjs
     ./build/src/plugins/index.cjs.map
     ./build/src/plugins/index.js
     ./build/src/plugins/index.js.map
     ./build/src/plugins/plugin-a.css
     ./build/src/plugins/plugin-b.css
     ./build/src/utils.cjs
     ./build/src/utils.cjs.map
     ./build/src/utils.js
     ./build/src/utils.js.map
     ./types/src/hello.d.cts
     ./types/src/hello.d.cts.map
     ./types/src/hello.d.ts
     ./types/src/hello.d.ts.map
     ./types/src/index.d.cts
     ./types/src/index.d.cts.map
     ./types/src/index.d.ts
     ./types/src/index.d.ts.map
     ./types/src/plugins/a.d.cts
     ./types/src/plugins/a.d.cts.map
     ./types/src/plugins/a.d.ts
     ./types/src/plugins/a.d.ts.map
     ./types/src/plugins/b.d.cts
     ./types/src/plugins/b.d.cts.map
     ./types/src/plugins/c.d.mts
     ./types/src/plugins/c.d.mts.map
     ./types/src/plugins/index.d.cts
     ./types/src/plugins/index.d.cts.map
     ./types/src/plugins/index.d.ts
     ./types/src/plugins/index.d.ts.map
     ./types/src/utils.d.cts
     ./types/src/utils.d.cts.map
     ./types/src/utils.d.ts
     ./types/src/utils.d.ts.map
→  [dryrun] Updating package.json#/exports...
→  Generated "exports": {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./types/src/index.d.cts",
       "import": "./build/src/index.js",
       "require": "./build/src/index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./types/src/utils.d.cts",
       "import": "./build/src/utils.js",
       "require": "./build/src/utils.cjs"
     },
     "./plugins": {
       "@zod/source": "./src/plugins/index.ts",
       "types": "./types/src/plugins/index.d.cts",
       "import": "./build/src/plugins/index.js",
       "require": "./build/src/plugins/index.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./types/src/plugins/*",
       "import": "./build/src/plugins/*",
       "require": "./build/src/plugins/*"
     }
   }
→  [dryrun] Updating package.json#/bin...
→  Generated "bin": "./build/src/index.cjs"
→  [dryrun] Skipping package.json modification
→  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with tsconfig.flat.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "→  Starting build...
→  Verbose mode enabled
→  Detected package manager: <pm>
→  Dry run mode enabled. No files will be written or modified.
→  Build will fail only on errors (default)
→  Detected project root: <root>/test
→  Reading package.json from ./package.json
→  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts",
       "./utils": "./src/utils.ts",
       "./plugins": "./src/plugins/index.ts",
       "./plugins/*": "./src/plugins/*"
     },
     "bin": "./src/index.ts",
     "sourceDialects": [
       "@zod/source"
     ]
   }
→  Reading tsconfig from ./tsconfig.flat.json
→  You're building your code to the project root. This means your compiled files will be generated alongside your source files.
   Ensure that your "files" in package.json excludes TypeScript source files, or your users may experience .d.ts resolution issues in some environments:
     "files": ["**/*.js", "**/*.mjs", "**/*.cjs", "**/*.d.ts", "**/*.d.mts", "**/*.d.cts"]
→  Determining entrypoints...
   ╔═══════════════════════════════╤═════════════════════════════╗
   ║ Subpath                       │ Entrypoint                  ║
   ╟───────────────────────────────┼─────────────────────────────╢
   ║ "zshy-test-fixture"           │ ./src/index.ts              ║
   ║ "zshy-test-fixture/utils"     │ ./src/utils.ts              ║
   ║ "zshy-test-fixture/plugins"   │ ./src/plugins/index.ts      ║
   ║ "zshy-test-fixture/plugins/*" │ ./src/plugins/* (4 matches) ║
   ║ bin:zshy-test-fixture         │ ./src/index.ts              ║
   ╚═══════════════════════════════╧═════════════════════════════╝
→  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ .             ║
   ╚══════════╧═══════════════╝
→  Package is an ES module (package.json#/type is "module")
→  [dryrun] Skipping cleanup of outDir as it contains source files
→  [dryrun] Skipping cleanup of declarationDir as it contains source files
→  Resolved entrypoints: [
     "./src/index.ts",
     "./src/utils.ts",
     "./src/plugins/index.ts",
     "./src/plugins/a.ts",
     "./src/plugins/b.cts",
     "./src/plugins/c.mts"
   ]
→  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "rootDir": "<root>/test/src",
     "outDir": "<root>/test",
     "emitDeclarationOnly": false
   }
→  Building CJS... (rewriting .ts -> .cjs/.d.cts)
→  Found 5 asset import(s), copying to output directory...
→  [dryrun] Copied asset: ./src/assets/README.md → ./assets/README.md
→  [dryrun] Copied asset: ./src/assets/styles.css → ./assets/styles.css
→  [dryrun] Copied asset: ./src/assets/config.json → ./assets/config.json
→  [dryrun] Copied asset: ./src/plugins/plugin-a.css → ./plugins/plugin-a.css
→  [dryrun] Copied asset: ./src/plugins/plugin-b.css → ./plugins/plugin-b.css
→  Building ESM...
→  Found 5 asset import(s), copying to output directory...
→  [dryrun] Writing files (53 total)...
     ./assets/README.md
     ./assets/config.json
     ./assets/styles.css
     ./hello.cjs
     ./hello.cjs.map
     ./hello.d.cts
     ./hello.d.cts.map
     ./hello.d.ts
     ./hello.d.ts.map
     ./hello.js
     ./hello.js.map
     ./index.cjs
     ./index.cjs.map
     ./index.d.cts
     ./index.d.cts.map
     ./index.d.ts
     ./index.d.ts.map
     ./index.js
     ./index.js.map
     ./plugins/a.cjs
     ./plugins/a.cjs.map
     ./plugins/a.d.cts
     ./plugins/a.d.cts.map
     ./plugins/a.d.ts
     ./plugins/a.d.ts.map
     ./plugins/a.js
     ./plugins/a.js.map
     ./plugins/b.cjs
     ./plugins/b.cjs.map
     ./plugins/b.d.cts
     ./plugins/b.d.cts.map
     ./plugins/c.d.mts
     ./plugins/c.d.mts.map
     ./plugins/c.mjs
     ./plugins/c.mjs.map
     ./plugins/index.cjs
     ./plugins/index.cjs.map
     ./plugins/index.d.cts
     ./plugins/index.d.cts.map
     ./plugins/index.d.ts
     ./plugins/index.d.ts.map
     ./plugins/index.js
     ./plugins/index.js.map
     ./plugins/plugin-a.css
     ./plugins/plugin-b.css
     ./utils.cjs
     ./utils.cjs.map
     ./utils.d.cts
     ./utils.d.cts.map
     ./utils.d.ts
     ./utils.d.ts.map
     ./utils.js
     ./utils.js.map
→  [dryrun] Updating package.json#/exports...
→  Generated "exports": {
     ".": {
       "@zod/source": "./src/index.ts",
       "types": "./index.d.cts",
       "import": "./index.js",
       "require": "./index.cjs"
     },
     "./utils": {
       "@zod/source": "./src/utils.ts",
       "types": "./utils.d.cts",
       "import": "./utils.js",
       "require": "./utils.cjs"
     },
     "./plugins": {
       "@zod/source": "./src/plugins/index.ts",
       "types": "./plugins/index.d.cts",
       "import": "./plugins/index.js",
       "require": "./plugins/index.cjs"
     },
     "./plugins/*": {
       "@zod/source": "./src/plugins/*",
       "types": "./plugins/*",
       "import": "./plugins/*",
       "require": "./plugins/*"
     }
   }
→  [dryrun] Updating package.json#/bin...
→  Generated "bin": "./index.cjs"
→  [dryrun] Skipping package.json modification
→  Build complete!",
}
`;
