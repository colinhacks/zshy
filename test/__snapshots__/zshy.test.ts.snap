// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`zshy with different tsconfig configurations > should not edit package.json when noEdit is true 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/no-edit-package-json
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts"
     },
     "noEdit": true
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
   ╔══════════╤════════════════╗
   ║ Subpath  │ Entrypoint     ║
   ╟──────────┼────────────────╢
   ║ "my-pkg" │ ./src/index.ts ║
   ╚══════════╧════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Cleaning up declarationDir...
»  Resolved entrypoints: [
     "./src/index.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/no-edit-package-json/dist",
     "emitDeclarationOnly": false,
     "composite": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Building ESM...
»  Writing files (8 total)...
     ./dist/index.cjs
     ./dist/index.cjs.map
     ./dist/index.d.cts
     ./dist/index.d.cts.map
     ./dist/index.d.ts
     ./dist/index.d.ts.map
     ./dist/index.js
     ./dist/index.js.map
»  [noedit] Skipping modification of package.json
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should skip CJS build when commonjs is false 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/esm-only
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts"
     },
     "cjs": false
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
   ╔══════════╤════════════════╗
   ║ Subpath  │ Entrypoint     ║
   ╟──────────┼────────────────╢
   ║ "my-pkg" │ ./src/index.ts ║
   ╚══════════╧════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Cleaning up declarationDir...
»  Resolved entrypoints: [
     "./src/index.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/esm-only/dist",
     "emitDeclarationOnly": false,
     "composite": false
   }
»  Skipping CJS build (cjs: false)
»  Building ESM...
»  Writing files (4 total)...
     ./dist/index.d.ts
     ./dist/index.d.ts.map
     ./dist/index.js
     ./dist/index.js.map
»  Updating package.json...
»  Setting "main": "./dist/index.cjs"
»  Setting "module": "./dist/index.js"
»  Setting "types": "./dist/index.d.ts"
»  Setting "exports": {
     ".": {
       "types": "./dist/index.d.ts",
       "import": "./dist/index.js"
     }
   }
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should support multiple bin entries 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/multi-bin
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts"
     },
     "bin": {
       "cli-one": "./src/cli-one.ts",
       "cli-two": "./src/cli-two.ts"
     }
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
   ╔═════════════════╤══════════════════╗
   ║ Subpath         │ Entrypoint       ║
   ╟─────────────────┼──────────────────╢
   ║ "multi-bin-pkg" │ ./src/index.ts   ║
   ║ bin:cli-one     │ ./src/cli-one.ts ║
   ║ bin:cli-two     │ ./src/cli-two.ts ║
   ╚═════════════════╧══════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Cleaning up declarationDir...
»  Resolved entrypoints: [
     "./src/index.ts",
     "./src/cli-one.ts",
     "./src/cli-two.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/multi-bin/dist",
     "emitDeclarationOnly": false,
     "composite": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Building ESM...
»  Writing files (24 total)...
     ./dist/cli-one.cjs
     ./dist/cli-one.cjs.map
     ./dist/cli-one.d.cts
     ./dist/cli-one.d.cts.map
     ./dist/cli-one.d.ts
     ./dist/cli-one.d.ts.map
     ./dist/cli-one.js
     ./dist/cli-one.js.map
     ./dist/cli-two.cjs
     ./dist/cli-two.cjs.map
     ./dist/cli-two.d.cts
     ./dist/cli-two.d.cts.map
     ./dist/cli-two.d.ts
     ./dist/cli-two.d.ts.map
     ./dist/cli-two.js
     ./dist/cli-two.js.map
     ./dist/index.cjs
     ./dist/index.cjs.map
     ./dist/index.d.cts
     ./dist/index.d.cts.map
     ./dist/index.d.ts
     ./dist/index.d.ts.map
     ./dist/index.js
     ./dist/index.js.map
»  Updating package.json...
»  Setting "main": "./dist/index.cjs"
»  Setting "module": "./dist/index.js"
»  Setting "types": "./dist/index.d.cts"
»  Setting "exports": {
     ".": {
       "types": "./dist/index.d.cts",
       "import": "./dist/index.js",
       "require": "./dist/index.cjs"
     }
   }
»  Setting "bin": {
     "cli-one": "./dist/cli-one.cjs",
     "cli-two": "./dist/cli-two.cjs"
   }
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should support tsconfig paths aliases with at-sign 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/tsconfig-paths
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts"
     }
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
   ╔═══════════════════════╤════════════════╗
   ║ Subpath               │ Entrypoint     ║
   ╟───────────────────────┼────────────────╢
   ║ "test-tsconfig-paths" │ ./src/index.ts ║
   ╚═══════════════════════╧════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Cleaning up declarationDir...
»  Resolved entrypoints: [
     "./src/index.ts"
   ]
»  Resolved compilerOptions: {
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "esModuleInterop": true,
     "strict": true,
     "skipLibCheck": true,
     "forceConsistentCasingInFileNames": true,
     "declaration": true,
     "baseUrl": "<root>/test/tsconfig-paths/src",
     "paths": {
       "@components/*": [
         "<root>/test/tsconfig-paths/src/components/*"
       ],
       "@/config": [
         "<root>/test/tsconfig-paths/src/config.ts"
       ],
       "utils/*": [
         "utils/*"
       ],
       "components/*": [
         "components/*"
       ],
       "lib/*": [
         "lib/*"
       ],
       "~/*": [
         "*"
       ],
       "$config": [
         "config.ts"
       ],
       "#helpers": [
         "./utils/helpers.ts"
       ],
       "@utils/*": [
         "<root>/test/tsconfig-paths/src/utils/*"
       ]
     },
     "pathsBasePath": "<root>/test/tsconfig-paths",
     "outDir": "<root>/test/tsconfig-paths/dist",
     "noEmit": false,
     "emitDeclarationOnly": false,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "composite": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Building ESM...
»  Writing files (16 total)...
     ./dist/components/calculator.cjs
     ./dist/components/calculator.d.cts
     ./dist/components/calculator.d.ts
     ./dist/components/calculator.js
     ./dist/config.cjs
     ./dist/config.d.cts
     ./dist/config.d.ts
     ./dist/config.js
     ./dist/index.cjs
     ./dist/index.d.cts
     ./dist/index.d.ts
     ./dist/index.js
     ./dist/utils/math.cjs
     ./dist/utils/math.d.cts
     ./dist/utils/math.d.ts
     ./dist/utils/math.js
»  Updating package.json...
»  Setting "main": "./dist/index.cjs"
»  Setting "module": "./dist/index.js"
»  Setting "types": "./dist/index.d.cts"
»  Setting "exports": {
     ".": {
       "types": "./dist/index.d.cts",
       "import": "./dist/index.js",
       "require": "./dist/index.cjs"
     }
   }
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with basic.test.tsconfig.json 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/basic
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       "./package.json": "./package.json",
       ".": "./src/index.ts",
       "./hello": "./src/hello.ts",
       "./utils": "./src/utils.ts",
       "./plugins": "./src/plugins/index.ts",
       "./plugins/*": "./src/plugins/**/*",
       "./default-function": "./src/default-function.ts",
       "./default-class": "./src/default-class.ts",
       "./default-object": "./src/default-object.ts",
       "./default-arrow": "./src/default-arrow.ts",
       "./default-with-named": "./src/default-with-named.ts",
       "./default-with-export-star": "./src/default-with-export-star.ts",
       "./default-export-equals": "./src/default-export-equals.ts",
       "./default-const": "./src/default-const.ts",
       "./default-literal": "./src/default-literal.ts",
       "./env.d.ts": "./src/env.d.ts",
       "./config.json": "./src/assets/config.json"
     },
     "bin": "./src/index.ts"
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
»  Matching glob: ./src/plugins/**/*.{ts,tsx,mts,cts}
   ╔═══════════════════════════════════╤═══════════════════════════════════╗
   ║ Subpath                           │ Entrypoint                        ║
   ╟───────────────────────────────────┼───────────────────────────────────╢
   ║ "my-pkg"                          │ ./src/index.ts                    ║
   ║ "my-pkg/hello"                    │ ./src/hello.ts                    ║
   ║ "my-pkg/utils"                    │ ./src/utils.ts                    ║
   ║ "my-pkg/plugins"                  │ ./src/plugins/index.ts            ║
   ║ "my-pkg/plugins/*"                │ ./src/plugins/**/* (5 matches)    ║
   ║ "my-pkg/default-function"         │ ./src/default-function.ts         ║
   ║ "my-pkg/default-class"            │ ./src/default-class.ts            ║
   ║ "my-pkg/default-object"           │ ./src/default-object.ts           ║
   ║ "my-pkg/default-arrow"            │ ./src/default-arrow.ts            ║
   ║ "my-pkg/default-with-named"       │ ./src/default-with-named.ts       ║
   ║ "my-pkg/default-with-export-star" │ ./src/default-with-export-star.ts ║
   ║ "my-pkg/default-export-equals"    │ ./src/default-export-equals.ts    ║
   ║ "my-pkg/default-const"            │ ./src/default-const.ts            ║
   ║ "my-pkg/default-literal"          │ ./src/default-literal.ts          ║
   ║ "my-pkg/env.d.ts"                 │ ./src/env.d.ts                    ║
   ║ "my-pkg/config.json"              │ ./src/assets/config.json          ║
   ║ bin:my-pkg                        │ ./src/index.ts                    ║
   ╚═══════════════════════════════════╧═══════════════════════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Cleaning up declarationDir...
»  Resolved entrypoints: [
     "./src/index.ts",
     "./src/hello.ts",
     "./src/utils.ts",
     "./src/plugins/index.ts",
     "./src/plugins/a.ts",
     "./src/plugins/b.cts",
     "./src/plugins/c.mts",
     "./src/plugins/d/index.ts",
     "./src/default-function.ts",
     "./src/default-class.ts",
     "./src/default-object.ts",
     "./src/default-arrow.ts",
     "./src/default-with-named.ts",
     "./src/default-with-export-star.ts",
     "./src/default-export-equals.ts",
     "./src/default-const.ts",
     "./src/default-literal.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/basic/dist",
     "composite": false,
     "emitDeclarationOnly": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Found 5 asset import(s), copying to output directory...
»  Copied asset: ./src/assets/README.md → ./dist/assets/README.md
»  Copied asset: ./src/assets/styles.css → ./dist/assets/styles.css
»  Copied asset: ./src/assets/config.json → ./dist/assets/config.json
»  Copied asset: ./src/plugins/plugin-a.css → ./dist/plugins/plugin-a.css
»  Copied asset: ./src/plugins/plugin-b.css → ./dist/plugins/plugin-b.css
»  Building ESM...
»  Found 5 asset import(s), copying to output directory...
»  Copying 2 asset entrypoint(s)...
»  Copied asset entrypoint: ./src/env.d.ts → ./dist/env.d.ts
»  Copied asset entrypoint: ./src/assets/config.json → ./dist/assets/config.json
»  Writing files (133 total)...
     ./dist/assets/README.md
     ./dist/assets/config.json
     ./dist/assets/styles.css
     ./dist/default-arrow.cjs
     ./dist/default-arrow.cjs.map
     ./dist/default-arrow.d.cts
     ./dist/default-arrow.d.cts.map
     ./dist/default-arrow.d.ts
     ./dist/default-arrow.d.ts.map
     ./dist/default-arrow.js
     ./dist/default-arrow.js.map
     ./dist/default-class.cjs
     ./dist/default-class.cjs.map
     ./dist/default-class.d.cts
     ./dist/default-class.d.cts.map
     ./dist/default-class.d.ts
     ./dist/default-class.d.ts.map
     ./dist/default-class.js
     ./dist/default-class.js.map
     ./dist/default-const.cjs
     ./dist/default-const.cjs.map
     ./dist/default-const.d.cts
     ./dist/default-const.d.cts.map
     ./dist/default-const.d.ts
     ./dist/default-const.d.ts.map
     ./dist/default-const.js
     ./dist/default-const.js.map
     ./dist/default-export-equals.cjs
     ./dist/default-export-equals.cjs.map
     ./dist/default-export-equals.d.cts
     ./dist/default-export-equals.d.cts.map
     ./dist/default-export-equals.d.ts
     ./dist/default-export-equals.d.ts.map
     ./dist/default-export-equals.js
     ./dist/default-export-equals.js.map
     ./dist/default-function.cjs
     ./dist/default-function.cjs.map
     ./dist/default-function.d.cts
     ./dist/default-function.d.cts.map
     ./dist/default-function.d.ts
     ./dist/default-function.d.ts.map
     ./dist/default-function.js
     ./dist/default-function.js.map
     ./dist/default-literal.cjs
     ./dist/default-literal.cjs.map
     ./dist/default-literal.d.cts
     ./dist/default-literal.d.cts.map
     ./dist/default-literal.d.ts
     ./dist/default-literal.d.ts.map
     ./dist/default-literal.js
     ./dist/default-literal.js.map
     ./dist/default-object.cjs
     ./dist/default-object.cjs.map
     ./dist/default-object.d.cts
     ./dist/default-object.d.cts.map
     ./dist/default-object.d.ts
     ./dist/default-object.d.ts.map
     ./dist/default-object.js
     ./dist/default-object.js.map
     ./dist/default-with-export-star.cjs
     ./dist/default-with-export-star.cjs.map
     ./dist/default-with-export-star.d.cts
     ./dist/default-with-export-star.d.cts.map
     ./dist/default-with-export-star.d.ts
     ./dist/default-with-export-star.d.ts.map
     ./dist/default-with-export-star.js
     ./dist/default-with-export-star.js.map
     ./dist/default-with-named.cjs
     ./dist/default-with-named.cjs.map
     ./dist/default-with-named.d.cts
     ./dist/default-with-named.d.cts.map
     ./dist/default-with-named.d.ts
     ./dist/default-with-named.d.ts.map
     ./dist/default-with-named.js
     ./dist/default-with-named.js.map
     ./dist/hello.cjs
     ./dist/hello.cjs.map
     ./dist/hello.d.cts
     ./dist/hello.d.cts.map
     ./dist/hello.d.ts
     ./dist/hello.d.ts.map
     ./dist/hello.js
     ./dist/hello.js.map
     ./dist/index.cjs
     ./dist/index.cjs.map
     ./dist/index.d.cts
     ./dist/index.d.cts.map
     ./dist/index.d.ts
     ./dist/index.d.ts.map
     ./dist/index.js
     ./dist/index.js.map
     ./dist/plugins/a.cjs
     ./dist/plugins/a.cjs.map
     ./dist/plugins/a.d.cts
     ./dist/plugins/a.d.cts.map
     ./dist/plugins/a.d.ts
     ./dist/plugins/a.d.ts.map
     ./dist/plugins/a.js
     ./dist/plugins/a.js.map
     ./dist/plugins/b.cjs
     ./dist/plugins/b.cjs.map
     ./dist/plugins/b.d.cts
     ./dist/plugins/b.d.cts.map
     ./dist/plugins/c.d.mts
     ./dist/plugins/c.d.mts.map
     ./dist/plugins/c.mjs
     ./dist/plugins/c.mjs.map
     ./dist/plugins/d/index.cjs
     ./dist/plugins/d/index.cjs.map
     ./dist/plugins/d/index.d.cts
     ./dist/plugins/d/index.d.cts.map
     ./dist/plugins/d/index.d.ts
     ./dist/plugins/d/index.d.ts.map
     ./dist/plugins/d/index.js
     ./dist/plugins/d/index.js.map
     ./dist/plugins/index.cjs
     ./dist/plugins/index.cjs.map
     ./dist/plugins/index.d.cts
     ./dist/plugins/index.d.cts.map
     ./dist/plugins/index.d.ts
     ./dist/plugins/index.d.ts.map
     ./dist/plugins/index.js
     ./dist/plugins/index.js.map
     ./dist/plugins/plugin-a.css
     ./dist/plugins/plugin-b.css
     ./dist/utils.cjs
     ./dist/utils.cjs.map
     ./dist/utils.d.cts
     ./dist/utils.d.cts.map
     ./dist/utils.d.ts
     ./dist/utils.d.ts.map
     ./dist/utils.js
     ./dist/utils.js.map
»  Updating package.json...
»  Setting "main": "./dist/index.cjs"
»  Setting "module": "./dist/index.js"
»  Setting "types": "./dist/index.d.cts"
»  Setting "exports": {
     "./package.json": "./package.json",
     ".": {
       "types": "./dist/index.d.cts",
       "import": "./dist/index.js",
       "require": "./dist/index.cjs"
     },
     "./hello": {
       "types": "./dist/hello.d.cts",
       "import": "./dist/hello.js",
       "require": "./dist/hello.cjs"
     },
     "./utils": {
       "types": "./dist/utils.d.cts",
       "import": "./dist/utils.js",
       "require": "./dist/utils.cjs"
     },
     "./plugins": {
       "types": "./dist/plugins/index.d.cts",
       "import": "./dist/plugins/index.js",
       "require": "./dist/plugins/index.cjs"
     },
     "./plugins/*": {
       "types": "./dist/plugins/*",
       "import": "./dist/plugins/*",
       "require": "./dist/plugins/*"
     },
     "./default-function": {
       "types": "./dist/default-function.d.cts",
       "import": "./dist/default-function.js",
       "require": "./dist/default-function.cjs"
     },
     "./default-class": {
       "types": "./dist/default-class.d.cts",
       "import": "./dist/default-class.js",
       "require": "./dist/default-class.cjs"
     },
     "./default-object": {
       "types": "./dist/default-object.d.cts",
       "import": "./dist/default-object.js",
       "require": "./dist/default-object.cjs"
     },
     "./default-arrow": {
       "types": "./dist/default-arrow.d.cts",
       "import": "./dist/default-arrow.js",
       "require": "./dist/default-arrow.cjs"
     },
     "./default-with-named": {
       "types": "./dist/default-with-named.d.cts",
       "import": "./dist/default-with-named.js",
       "require": "./dist/default-with-named.cjs"
     },
     "./default-with-export-star": {
       "types": "./dist/default-with-export-star.d.cts",
       "import": "./dist/default-with-export-star.js",
       "require": "./dist/default-with-export-star.cjs"
     },
     "./default-export-equals": {
       "types": "./dist/default-export-equals.d.cts",
       "import": "./dist/default-export-equals.js",
       "require": "./dist/default-export-equals.cjs"
     },
     "./default-const": {
       "types": "./dist/default-const.d.cts",
       "import": "./dist/default-const.js",
       "require": "./dist/default-const.cjs"
     },
     "./default-literal": {
       "types": "./dist/default-literal.d.cts",
       "import": "./dist/default-literal.js",
       "require": "./dist/default-literal.cjs"
     },
     "./env.d.ts": {
       "types": "./dist/env.d.ts",
       "import": "./dist/env.d.ts",
       "require": "./dist/env.d.ts"
     },
     "./config.json": {
       "types": "./dist/assets/config.json",
       "import": "./dist/assets/config.json",
       "require": "./dist/assets/config.json"
     }
   }
»  Setting "bin": "./dist/index.cjs"
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with custom conditions 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/custom-conditions
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts",
       "./utils": "./src/utils.ts"
     },
     "conditions": {
       "custom-esm": "esm",
       "custom-cjs": "cjs",
       "custom-src": "src"
     }
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
   ╔════════════════════════════════╤════════════════╗
   ║ Subpath                        │ Entrypoint     ║
   ╟────────────────────────────────┼────────────────╢
   ║ "custom-conditions-test"       │ ./src/index.ts ║
   ║ "custom-conditions-test/utils" │ ./src/utils.ts ║
   ╚════════════════════════════════╧════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ ./dist        ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Cleaning up declarationDir...
»  Resolved entrypoints: [
     "./src/index.ts",
     "./src/utils.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/custom-conditions/dist",
     "emitDeclarationOnly": false,
     "composite": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Building ESM...
»  Writing files (16 total)...
     ./dist/index.cjs
     ./dist/index.cjs.map
     ./dist/index.d.cts
     ./dist/index.d.cts.map
     ./dist/index.d.ts
     ./dist/index.d.ts.map
     ./dist/index.js
     ./dist/index.js.map
     ./dist/utils.cjs
     ./dist/utils.cjs.map
     ./dist/utils.d.cts
     ./dist/utils.d.cts.map
     ./dist/utils.d.ts
     ./dist/utils.d.ts.map
     ./dist/utils.js
     ./dist/utils.js.map
»  Updating package.json...
»  Setting "main": "./dist/index.cjs"
»  Setting "module": "./dist/index.js"
»  Setting "types": "./dist/index.d.cts"
»  Setting "exports": {
     ".": {
       "custom-esm": "./dist/index.js",
       "custom-cjs": "./dist/index.cjs",
       "custom-src": "./src/index.ts",
       "types": "./dist/index.d.cts",
       "import": "./dist/index.js",
       "require": "./dist/index.cjs"
     },
     "./utils": {
       "custom-esm": "./dist/utils.js",
       "custom-cjs": "./dist/utils.cjs",
       "custom-src": "./src/utils.ts",
       "types": "./dist/utils.d.cts",
       "import": "./dist/utils.js",
       "require": "./dist/utils.cjs"
     }
   }
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with custom outDir and declarationDir 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/custom-paths
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts"
     }
   }
»  Reading tsconfig from ./tsconfig.json
»  Determining entrypoints...
   ╔══════════╤════════════════╗
   ║ Subpath  │ Entrypoint     ║
   ╟──────────┼────────────────╢
   ║ "my-pkg" │ ./src/index.ts ║
   ╚══════════╧════════════════╝
»  Resolved build paths:
   ╔════════════════╤══════════════════╗
   ║ Location       │ Resolved path    ║
   ╟────────────────┼──────────────────╢
   ║ rootDir        │ ./src            ║
   ║ outDir         │ ./dist/build/src ║
   ║ declarationDir │ ./dist/types/src ║
   ╚════════════════╧══════════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Cleaning up outDir...
»  Resolved entrypoints: [
     "./src/index.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/custom-paths/dist/build/src",
     "declarationDir": "<root>/test/custom-paths/dist/types/src",
     "emitDeclarationOnly": false,
     "composite": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Building ESM...
»  Writing files (8 total)...
     ./dist/build/src/index.cjs
     ./dist/build/src/index.cjs.map
     ./dist/build/src/index.js
     ./dist/build/src/index.js.map
     ./dist/types/src/index.d.cts
     ./dist/types/src/index.d.cts.map
     ./dist/types/src/index.d.ts
     ./dist/types/src/index.d.ts.map
»  Updating package.json...
»  Setting "main": "./dist/build/src/index.cjs"
»  Setting "module": "./dist/build/src/index.js"
»  Setting "types": "./dist/types/src/index.d.cts"
»  Setting "exports": {
     ".": {
       "types": "./dist/types/src/index.d.cts",
       "import": "./dist/build/src/index.js",
       "require": "./dist/build/src/index.cjs"
     }
   }
»  Build complete!",
}
`;

exports[`zshy with different tsconfig configurations > should work with flat build (outDir: '.') 1`] = `
{
  "exitCode": 0,
  "stderr": "",
  "stdout": "╔═══════════════════════════════════════════════╗
   ║ zshy » the bundler-free TypeScript build tool ║
   ╚═══════════════════════════════════════════════╝
»  Starting build...
»  Verbose mode enabled
»  Detected package manager: <pm>
»  Build will fail only on errors (default)
»  Detected project root: <root>/test/flat
»  Reading package.json from ./package.json
»  Parsed zshy config: {
     "exports": {
       ".": "./src/index.ts"
     }
   }
»  Reading tsconfig from ./tsconfig.json
»  You're building your code to the project root. This means your compiled files will be generated alongside your source files.
   Ensure that your "files" in package.json excludes TypeScript source files, or your users may experience .d.ts resolution issues in some environments:
     "files": ["**/*.js", "**/*.mjs", "**/*.cjs", "**/*.d.ts", "**/*.d.mts", "**/*.d.cts"]
»  Determining entrypoints...
   ╔══════════╤════════════════╗
   ║ Subpath  │ Entrypoint     ║
   ╟──────────┼────────────────╢
   ║ "my-pkg" │ ./src/index.ts ║
   ╚══════════╧════════════════╝
»  Resolved build paths:
   ╔══════════╤═══════════════╗
   ║ Location │ Resolved path ║
   ╟──────────┼───────────────╢
   ║ rootDir  │ ./src         ║
   ║ outDir   │ .             ║
   ╚══════════╧═══════════════╝
»  Package is an ES module (package.json#/type is "module")
»  Skipping cleanup of outDir as it contains source files
»  Skipping cleanup of declarationDir as it contains source files
»  Resolved entrypoints: [
     "./src/index.ts"
   ]
»  Resolved compilerOptions: {
     "lib": [
       "lib.esnext.d.ts"
     ],
     "target": "ES2020",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "moduleDetection": 2,
     "allowJs": true,
     "declaration": true,
     "jsx": 4,
     "allowImportingTsExtensions": true,
     "rewriteRelativeImportExtensions": true,
     "verbatimModuleSyntax": false,
     "noEmit": false,
     "strict": true,
     "skipLibCheck": true,
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "noUnusedLocals": true,
     "noUnusedParameters": false,
     "noPropertyAccessFromIndexSignature": false,
     "sourceMap": true,
     "declarationMap": true,
     "resolveJsonModule": true,
     "noImplicitOverride": true,
     "noImplicitThis": true,
     "outDir": "<root>/test/flat",
     "emitDeclarationOnly": false,
     "composite": false
   }
»  Building CJS... (rewriting .ts -> .cjs/.d.cts)
»  Enabling CJS interop transform...
»  Building ESM...
»  Writing files (8 total)...
     ./index.cjs
     ./index.cjs.map
     ./index.d.cts
     ./index.d.cts.map
     ./index.d.ts
     ./index.d.ts.map
     ./index.js
     ./index.js.map
»  Updating package.json...
»  Setting "main": "./index.cjs"
»  Setting "module": "./index.js"
»  Setting "types": "./index.d.cts"
»  Setting "exports": {
     ".": {
       "types": "./index.d.cts",
       "import": "./index.js",
       "require": "./index.cjs"
     }
   }
»  Build complete!",
}
`;
